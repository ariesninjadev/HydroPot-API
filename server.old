const fs = require("fs");
const path = require("path");
const https = require("https");
const express = require("express");
var cors = require("cors");
const { Level } = require("level");
const bodyParser = require("body-parser");
const session = require("express-session");
const { DB } = require("./mongo");

require("dotenv").config();

const db = new Level("./db", { valueEncoding: "json" }); // User database
const timerdb = new Level("./timerdb", { valueEncoding: "json" }); // Timer database
const datedb = new Level("./datedb", { valueEncoding: "json" }); // Date database
const atdb = new Level("./atdb", { valueEncoding: "json" }); // Accumulated time database

const app = express();
app.set("view engine", "ejs");
app.use(cors());
app.use(bodyParser.urlencoded({ extended: true }));

var referrerLink = "https://ninjaverse.aries.ninja/";

var timerActive = true;

app.use(
    session({
        secret: "q3vt849qhv4q7893tvq89n3t4c983tq8trc73otcf8q3aotcf3aq46tca3q8t",
        resave: false,
        saveUninitialized: true,
    })
);

function authenticate(req, res, next) {
    if (req.session.authenticated) {
        // If user is authenticated, proceed to the next middleware
        next();
    } else {
        // If user is not authenticated, redirect to the login page
        res.redirect("/login");
    }
}

app.get("/login", (req, res) => {
    const errorMessage = req.session.errorMessage;
    req.session.errorMessage = null; // Clear the error message
    res.render("login", { errorMessage });
});

// Handle login form submission
app.post("/login", (req, res) => {
    const { username, password } = req.body;

    // Check if username and password are correct
    if (
        username === process.env.ADMIN_USR &&
        password === process.env.ADMIN_PWD
    ) {
        // If credentials are correct, set session authenticated flag to true
        req.session.authenticated = true;
        // Redirect to admin page
        res.redirect("/admin");
    } else {
        // If credentials are incorrect, store the error message in session and redirect back to login page
        req.session.errorMessage = "Invalid username or password.";
        res.redirect("/login");
    }
});

// Serve admin page
app.get("/admin", authenticate, async (req, res) => {
    // If user is authenticated, serve the admin page

    let totalPlaytime = 0;

    // Iterate over the database
    for await (const [key, value] of atdb.iterator()) {
        totalPlaytime += value;
    }
    const totalPlayers = 0;
    const totalGames = totalObjects;
    const totalSubscriptions = 0;
    res.render("admin.ejs", { totalPlayers, totalGames, totalSubscriptions, totalPlaytime });
});

// Handle logout
app.get("/logout", (req, res) => {
    // Clear the session data
    req.session.destroy((err) => {
        if (err) {
            console.error("Error destroying session:", err);
            return res.status(500).send("Internal Server Error");
        }
        // Redirect to login page after logout
        res.redirect("/login");
    });
});

//// API -----------------------------------------------------------------------

// Load initial data from data.json
let dataArray = [];
let totalObjects = 0;

fs.readFile("data.json", (err, data) => {
    if (err) {
        console.error("Error reading data.json:", err);
    } else {
        try {
            dataArray = JSON.parse(data);
            totalObjects = dataArray.length;
            console.log("Data loaded successfully from data.json");
        } catch (parseErr) {
            console.error("Error parsing data.json:", parseErr);
        }
    }
});


// Serve the timer.js file
app.get("/static/timer.js", (req, res) => {
    try {
        // Use __dirname to get the absolute path to the file
        const filePath = __dirname + "\\timer.js";
        // Send the file
        res.sendFile(filePath);
    } catch (err) {
        console.error("Error reading timer.js:", err);
        // Send an error response if something goes wrong
        res.status(500).send("Internal Server Error");
    }
});

app.get("/user/reg/:usr", (req, res) => {
    const usr = req.params.usr;
    db.put(usr, 0).then((result) => {
        res.json({ status: 200, user: usr });
    });
});

app.get("/user/upgrade/:usr", (req, res) => {
    const usr = req.params.usr;
    db.put(usr, 1).then((result) => {
        res.json({ status: 200, user: usr });
    });
});

app.get("/user/downgrade/:usr", (req, res) => {
    const usr = req.params.usr;
    db.put(usr, 0).then((result) => {
        res.json({ status: 200, user: usr });
    });
});

app.get("/user/fetch/:usr", (req, res) => {
    const usr = req.params.usr;
    //console.log("sysexit")

    db.get(usr)
        .then((result) => {
            res.json({ data: result, user: usr });
        })
        .catch((err) => {
            res.json({ data: 0, user: usr, error: err });
        });
});

app.get("/user/timer/fetch/:usr", (req, res) => {
    const usr = req.params.usr;
    //console.log("sysexit")

    timerdb
        .get(usr)
        .then((result) => {
            res.json({ data: result, user: usr });
        })
        .catch((err) => {
            timerdb
                .put(usr, 3600)
                .then((result) => {
                    res.json({ data: 3600, user: usr });
                })
                .catch((err) => {
                    res.json({ user: usr, error: err });
                });
        });
});

app.get("/user/total/fetch/:usr", (req, res) => {
    const usr = req.params.usr;
    //console.log("sysexit")

    atdb.get(usr)
        .then((result) => {
            res.json({ data: result, user: usr });
        })
        .catch((err) => {
            res.json({ data: 0, user: usr, error: err });
        });
});

app.get("/user/leaderboard", async (req, res) => {
    const sortedPairs = [];

    for await (const [key, value] of atdb.iterator()) {
        sortedPairs.push({ key, value });
    }

    sortedPairs.sort((a, b) => b.value - a.value);

    const sortedValues = sortedPairs.map((pair) => pair.value);

    res.json({ data: sortedPairs });
});

app.get("/user/total", async (req, res) => {
    let totalSum = 0;

    // Iterate over the database
    for await (const [key, value] of atdb.iterator()) {
        totalSum += value;
    }

    res.json({ data: totalSum });
});

app.get("/referrer", (req, res) => {
    res.json({ referrer: referrerLink });
});

app.get("/timeractive", (req, res) => {
    res.json({ data: timerActive });
});

app.get("/toggletimer", (req, res) => {
    timerActive = !timerActive;
    res.json({ status: 200, state: timerActive });
});

app.get("/giveeveryoneunlimitedtime", (req, res) => {
    timerActive = !timerActive;
    res.json({ status: 69, error: "u thought" });
});

app.get("/user/timer/allowed/:usr", (req, res) => {
    const usr = req.params.usr;
    //console.log("sysexit")

    var today = new Date().getDate();

    datedb
        .get(usr)
        .then((result) => {
            const dbDay = result;
            if (result == today) {
                timerdb
                    .get(usr)
                    .then((result) => {
                        if (result >= 0) {
                            res.json({
                                data: true,
                                user: usr,
                                lastCachedDate: dbDay,
                                currentDate: today,
                            });
                        } else {
                            res.json({
                                data: false,
                                user: usr,
                                referrer: referrerLink,
                                lastCachedDate: dbDay,
                                currentDate: today,
                            });
                        }
                    })
                    .catch((err) => {
                        res.json({ user: usr, error: err });
                    });
            } else {
                datedb
                    .put(usr, today.getDate())
                    .then((result) => {
                        timerdb
                            .put(usr, 3600)
                            .then((result) => {
                                res.json({ data: true, user: usr });
                            })
                            .catch((err) => {
                                res.json({ user: usr, error: err });
                            });
                    })
                    .catch((err) => {
                        res.json({ user: usr, error: err });
                    });
            }
        })
        .catch((err) => {
            timerdb
                .put(usr, 3600)
                .then((result) => {
                    datedb
                        .put(usr, today)
                        .then((result) => {
                            res.json({ data: true, user: usr });
                        })
                        .catch((err) => {
                            res.json({ user: usr, error: err });
                        });
                })
                .catch((err) => {
                    res.json({ user: usr, error: err });
                });
        });
});

app.get("/user/timer/step/:usr/:amt", (req, res) => {
    const usr = req.params.usr;
    const amt = parseInt(req.params.amt);
    if (amt < 0) {
        res.json({ user: usr, error: "u prob thought u were good at hacking" });
        return;
    }
    timerdb
        .get(usr)
        .then((result) => {
            timerdb
                .put(usr, result - amt)
                .then((result) => {
                    atdb.get(usr)
                        .then((result) => {
                            atdb.put(usr, result + amt)
                                .then((result) => {
                                    res.json({ status: 200, user: usr });
                                })
                                .catch((err) => {
                                    res.json({ user: usr, error: err });
                                });
                        })
                        .catch((err) => {
                            atdb.put(usr, amt)
                                .then((result) => {
                                    res.json({ user: usr, error: err });
                                })
                                .catch((err) => {
                                    res.json({ user: usr, error: err });
                                });
                        });
                })
                .catch((err) => {
                    res.json({ user: usr, error: err });
                });
        })
        .catch((err) => {
            res.json({ user: usr, error: err });
        });
});

app.get("/user/timer/set/:usr/:amt", (req, res) => {
    const usr = req.params.usr;
    const amt = parseInt(req.params.amt);
    timerdb
        .put(usr, amt)
        .then((result) => {
            res.json({ status: 200, user: usr });
        })
        .catch((err) => {
            res.json({ user: usr, error: err });
        });
});

// GET request to return the full array of integers
app.get("/games/load", (req, res) => {
    res.json(dataArray);
});

// POST request to increment integer at specified position
app.get("/increment/:position", (req, res) => {
    const position = parseInt(req.params.position);
    if (isNaN(position) || position < 0 || position >= dataArray.length) {
        return res.status(400).send("Invalid position");
    }
    dataArray[position].likes++;
    // Update data.json
    fs.writeFile("data.json", JSON.stringify(dataArray), (err) => {
        if (err) {
            console.error("Error writing to data.json:", err);
            return res.status(500).send("Internal Server Error");
        }
        res.json(dataArray);
    });
});

app.get("/decrement/:position", (req, res) => {
    const position = parseInt(req.params.position);
    if (isNaN(position) || position < 0 || position >= dataArray.length) {
        return res.status(400).send("Invalid position");
    }
    dataArray[position].likes--;
    // Update data.json
    fs.writeFile("data.json", JSON.stringify(dataArray), (err) => {
        if (err) {
            console.error("Error writing to data.json:", err);
            return res.status(500).send("Internal Server Error");
        }
        res.json(dataArray);
    });
});

// Create HTTPS server
const options = {
    key: fs.readFileSync("private.key"),
    cert: fs.readFileSync("certificate.crt"),
};

const PORT = 11420;

const server = https.createServer(options, app);

server.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
